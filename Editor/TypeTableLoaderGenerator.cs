#nullable enable
using System;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Popcron
{
    public static class TypeTableLoaderGenerator
    {
        public const string TypeName = "TypeTableLoader";
        private const string Indent = "    ";

        public static string GenerateScript()
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("//generated by " + nameof(TypeTableLoaderGenerator));
            builder.Append("using ");
            builder.Append(nameof(UnityEngine));
            builder.Append(';');
            builder.AppendLine();

            builder.Append("using ");
            builder.Append(nameof(Popcron));
            builder.Append(';');
            builder.AppendLine();

            builder.Append("public static class ");
            builder.Append(TypeName);
            builder.AppendLine();

            builder.AppendLine("{");
            builder.AppendLine("#if UNITY_EDITOR");
            builder.Append(Indent);
            builder.Append('[');
            builder.Append(nameof(UnityEditor));
            builder.Append('.');
            builder.Append(nameof(InitializeOnLoadMethodAttribute));
            builder.Append(']');
            builder.AppendLine();
            builder.AppendLine("#endif");

            builder.Append(Indent);
            builder.Append('[');
            builder.Append(nameof(RuntimeInitializeOnLoadMethodAttribute));
            builder.Append('(');
            builder.Append(nameof(RuntimeInitializeLoadType));
            builder.Append('.');
            builder.Append(nameof(RuntimeInitializeLoadType.BeforeSceneLoad));
            builder.Append(')');
            builder.Append(']');
            builder.AppendLine();

            builder.Append(Indent);
            builder.AppendLine("private static void Load()");
            builder.Append(Indent);
            builder.AppendLine("{");
            foreach (Type type in TypeCache.GetTypesWithAttribute<TypeIDAttribute>())
            {
                ushort typeId = type.GetCustomAttribute<TypeIDAttribute>().typeId;
                builder.Append(Indent);
                builder.Append(Indent);
                builder.Append(nameof(TypeTable));
                builder.Append('.');
                builder.Append(nameof(TypeTable.Register));
                builder.Append("(\"");
                builder.Append(type.AssemblyQualifiedName);
                builder.Append("\", ");
                builder.Append(typeId);
                builder.Append(");");
                builder.AppendLine();
            }

            builder.Append(Indent);
            builder.Append(Indent);
            builder.Append(nameof(TypeTable));
            builder.Append('.');
            builder.Append(nameof(TypeTable.FindAssignableTypes));
            builder.Append("();");
            builder.AppendLine();

            builder.Append(Indent);
            builder.AppendLine("}");
            builder.AppendLine("}");
            return builder.ToString();
        }
    }
}