#nullable enable
using System;
using System.IO;
using System.Reflection;
using System.Text;
using UnityEditor;

namespace Popcron
{
    public static class GenerateTypeTableLoader
    {
        private const string Indent = "    ";

        [MenuItem("Window/" + nameof(Popcron) + "/" + nameof(TypeTable) + "/Generate Loader Script")]
        private static void DoIt()
        {
            Generate("Assets/TypeTableLoader.cs");
        }

        public static void Generate(string pathToScript)
        {
            string script = GenerateScript();
            File.WriteAllText(pathToScript, script);
            AssetDatabase.Refresh();
        }

        public static string GenerateScript()
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("//generated by " + nameof(GenerateTypeTableLoader));
            builder.AppendLine("using UnityEngine;");
            builder.AppendLine("using Popcron;");
            builder.AppendLine();
            builder.AppendLine("public static class TypeTableLoader");
            builder.AppendLine("{");
            builder.AppendLine("#if UNITY_EDITOR");
            builder.Append(Indent);
            builder.AppendLine("[UnityEditor.InitializeOnLoadMethod]");
            builder.AppendLine("#endif");
            builder.Append(Indent);
            builder.AppendLine("[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]");
            builder.Append(Indent);
            builder.AppendLine("private static void Load()");
            builder.Append(Indent);
            builder.AppendLine("{");
            foreach (Type type in UnityEditor.TypeCache.GetTypesWithAttribute<TypeIDAttribute>())
            {
                ushort typeId = type.GetCustomAttribute<TypeIDAttribute>().typeId;
                builder.Append(Indent);
                builder.Append(Indent);
                builder.Append("TypeTable.Register(\"");
                builder.Append(type.AssemblyQualifiedName);
                builder.Append("\", ");
                builder.Append(typeId);
                builder.AppendLine(");");
            }

            builder.Append(Indent);
            builder.Append(Indent);
            builder.AppendLine("TypeTable.FindAssignableTypes();");
            builder.Append(Indent);
            builder.AppendLine("}");
            builder.AppendLine("}");
            return builder.ToString();
        }
    }
}